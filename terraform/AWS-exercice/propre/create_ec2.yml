---

- hosts: localhost
  become: no
  gather_facts: no

  vars:
    sg_id: "sg-d7a8f8b1"
    sg_name: "sg_ssh_http"
    vpc_id: "subnet-e70579bf"
    ami_id: "ami-e079f893"
    region: "eu-west-1"
    access_key: "AKIAINOG2XJCA43KYD3A"
    secret_key: "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"
    username: "admin"
    key_name: "training-unsafe"

# Create webserver
  tasks:
    - name: Lab Creating two webserver
      ec2:
        region: "{{ region }}"
        key_name: "{{ key_name  }}"
        instance_type: t2.micro
        image: "{{ ami_id }}"
        wait: yes
        assign_public_ip: yes
        count: 2
        group_id: ["{{ sg_id }}"]
        vpc_subnet_id: "{{ vpc_id }}"
        instance_tags:
          Name: "alban-webserver"
          Environment: "Dev"
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
      register: webserver
      when: "{{ hostvars[groups['webservers'][0]]['ec2_webservers'] is not defined }}"

    - debug:
        var: webserver

    - name: Setup a simple load balancer
      ec2_elb_lb:
        name: "elb-alban-lab"
        state: present
        region: "{{ region }}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        zones:
           - "{{ region }}a"
           - "{{ region }}b"
      register:  elb

    - set_fact:
        instances: []
      when: "{{ webserver|skipped }}"

    - set_fact:
        instances: "{{ webserver.instances }}"
      when: "{{ not webserver|skipped }}"


    - name: Add the webservers to the load balancer
      ec2_elb:
        instance_id: "{{ item.id }}"
        state: present
        region: "{{ region }}"
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
      with_items: "{{ instances }}"

    - wait_for:
        port: 22
        host: "{{ item.public_ip }}"
        search_regex: OpenSSH
        delay: 10
      with_items: "{{ instances }}"

    - name: output an ansible inventory
      template:
        src: "templates/inventory.j2"
        dest: "./ec2.inventory"
      when: "{{ not webserver|skipped }}"

    - lineinfile:
        dest: "{{ playbook_dir }}/group_vars/webservers/ec2.yml"
        line: "---"
        create: yes
        insertbefore: BOF

    - blockinfile:
        dest: "{{ playbook_dir }}/group_vars/webservers/ec2.yml"
        content: |-
          ec2_webservers:
          {% for instance in instances %}
            - {{ instance.id }}
          {% endfor %}
        insertafter: EOF
